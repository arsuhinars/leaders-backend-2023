version: "3.9"


services:
  database:
    image: postgres:16
    healthcheck:
      test: pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
      interval: 3s
      retries: 15
      start_period: 5s
    volumes:
      - db_data:/var/lib/postgresql/data/
    secrets:
      - postgres-user
      - postgres-password
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER_FILE: /run/secrets/postgres-user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password

  backend:
    build:
      context: .
      target: run
    healthcheck:
      test: curl -f http://localhost:8080/status
      interval: 3s
      retries: 30
      start_period: 5s
    volumes:
      - type: bind
        source: ./graph_hopper
        target: /backend/graph_hopper
    secrets:
      - source: postgres-user
        target: spring.datasource.username
      - source: postgres-password
        target: spring.datasource.password
      - source: graph-hopper-token
        target: leaders_backend.graph_hopper_token
    environment:
      SPRING_DATASOURCE_URL: $SPRING_DATASOURCE_URL
      SERVER_PORT: 8080
    labels:
      - "traefik.http.routers.backend.rule=Host(`localhost`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    depends_on:
      database:
        condition: service_healthy

  traefik:
    image: "traefik:v3.0"
    command:
      - "--providers.docker=true"
      - "--entryPoints.web.address=:$SERVER_PORT"
    ports:
      - "$SERVER_PORT:$SERVER_PORT"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      backend:
        condition: service_healthy


secrets:
  postgres-user:
    environment: POSTGRES_USER
  postgres-password:
    environment: POSTGRES_PASSWORD
  graph-hopper-token:
    environment: GRAPH_HOPPER_TOKEN


volumes:
  db_data:
